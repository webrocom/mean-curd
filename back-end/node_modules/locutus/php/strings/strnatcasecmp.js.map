{"version":3,"sources":["../../../src/php/strings/strnatcasecmp.js"],"names":[],"mappings":"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","file":"strnatcasecmp.js","sourcesContent":["module.exports = function strnatcasecmp (str1, str2) {\n  //       discuss at: http://locutusjs.io/php/strnatcasecmp/\n  //      original by: Martin Pool\n  // reimplemented by: Pierre-Luc Paour\n  // reimplemented by: Kristof Coomans (SCK-CEN (Belgian Nucleair Research Centre))\n  // reimplemented by: Brett Zamir (http://brett-zamir.me)\n  //      bugfixed by: Kevin van Zonneveld (http://kvz.io)\n  //         input by: Devan Penner-Woelk\n  //      improved by: Kevin van Zonneveld (http://kvz.io)\n  //        example 1: strnatcasecmp(10, 1)\n  //        returns 1: 1\n  //        example 2: strnatcasecmp('1', '10')\n  //        returns 2: -1\n  //        test: skip-all\n\n  var a = (str1 + '').toLowerCase()\n  var b = (str2 + '').toLowerCase()\n\n  var isWhitespaceChar = function (a) {\n    return a.charCodeAt(0) <= 32\n  }\n\n  var isDigitChar = function (a) {\n    var charCode = a.charCodeAt(0)\n    return (charCode >= 48 && charCode <= 57)\n  }\n\n  var compareRight = function (a, b) {\n    var bias = 0\n    var ia = 0\n    var ib = 0\n\n    var ca\n    var cb\n\n    // The longest run of digits wins.  That aside, the greatest\n    // value wins, but we can't know that it will until we've scanned\n    // both numbers to know that they have the same magnitude, so we\n    // remember it in BIAS.\n    for (; true; ia++, ib++) {\n      ca = a.charAt(ia)\n      cb = b.charAt(ib)\n\n      if (!isDigitChar(ca) && !isDigitChar(cb)) {\n        return bias\n      } else if (!isDigitChar(ca)) {\n        return -1\n      } else if (!isDigitChar(cb)) {\n        return 1\n      } else if (ca < cb) {\n        if (bias === 0) {\n          bias = -1\n        }\n      } else if (ca > cb) {\n        if (bias === 0) {\n          bias = 1\n        }\n      } else if (ca === '0' && cb === '0') {\n        return bias\n      }\n    }\n  }\n\n  var ia = 0\n  var ib = 0\n  var nza = 0\n  var nzb = 0\n  var ca\n  var cb\n  var result\n\n  while (true) {\n    // only count the number of zeroes leading the last number compared\n    nza = nzb = 0\n\n    ca = a.charAt(ia)\n    cb = b.charAt(ib)\n\n    // skip over leading spaces or zeros\n    while (isWhitespaceChar(ca) || ca === '0') {\n      if (ca === '0') {\n        nza++\n      } else {\n        // only count consecutive zeroes\n        nza = 0\n      }\n\n      ca = a.charAt(++ia)\n    }\n\n    while (isWhitespaceChar(cb) || cb === '0') {\n      if (cb === '0') {\n        nzb++\n      } else {\n        // only count consecutive zeroes\n        nzb = 0\n      }\n\n      cb = b.charAt(++ib)\n    }\n\n    // process run of digits\n    if (isDigitChar(ca) && isDigitChar(cb)) {\n      if ((result = compareRight(a.substring(ia), b.substring(ib))) !== 0) {\n        return result\n      }\n    }\n\n    if (ca === '0' && cb === '0') {\n      // The strings compare the same.  Perhaps the caller\n      // will want to call strcmp to break the tie.\n      return nza - nzb\n    }\n\n    if (ca < cb) {\n      return -1\n    } else if (ca > cb) {\n      return +1\n    }\n\n    // prevent possible infinite loop\n    if (ia >= a.length && ib >= b.length) return 0;\n\n    ++ia;\n    ++ib\n  }\n}\n"]}