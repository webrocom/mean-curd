{"version":3,"sources":["../../../src/php/strings/strnatcmp.js"],"names":[],"mappings":"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","file":"strnatcmp.js","sourcesContent":["module.exports = function strnatcmp (fString1, fString2, fVersion) {\n  //  discuss at: http://locutusjs.io/php/strnatcmp/\n  // original by: Martijn Wieringa\n  // improved by: Michael White (http://getsprink.com)\n  // improved by: Jack\n  // bugfixed by: Onno Marsman (https://twitter.com/onnomarsman)\n  //      note 1: Added fVersion argument against code guidelines, because it's so neat\n  //   example 1: strnatcmp('Price 12.9', 'Price 12.15')\n  //   returns 1: 1\n  //   example 2: strnatcmp('Price 12.09', 'Price 12.15')\n  //   returns 2: -1\n  //   example 3: strnatcmp('Price 12.90', 'Price 12.15')\n  //   returns 3: 1\n  //   example 4: strnatcmp('Version 12.9', 'Version 12.15', true)\n  //   returns 4: -6\n  //   example 5: strnatcmp('Version 12.15', 'Version 12.9', true)\n  //   returns 5: 6\n  //        test: skip-2\n\n  var strcmp = require('../strings/strcmp')\n  var i = 0\n\n  if (fVersion === undefined) {\n    fVersion = false\n  }\n\n  var _strnatcmpSplit = function (fString) {\n    var result = []\n    var buffer = ''\n    var chr = ''\n    var i = 0\n    var fStringl = 0\n\n    var text = true\n\n    fStringl = fString.length\n    for (i = 0; i < fStringl; i++) {\n      chr = fString.substring(i, i + 1)\n      if (chr.match(/\\d/)) {\n        if (text) {\n          if (buffer.length > 0) {\n            result[result.length] = buffer\n            buffer = ''\n          }\n\n          text = false\n        }\n        buffer += chr\n      } else if ((text === false) &&\n        (chr === '.') &&\n        (i < (fString.length - 1)) &&\n        (fString.substring(i + 1, i + 2).match(/\\d/))) {\n        // @todo: ^--- Break this up to make it more readable\n        result[result.length] = buffer\n        buffer = ''\n      } else {\n        if (text === false) {\n          if (buffer.length > 0) {\n            result[result.length] = parseInt(buffer, 10)\n            buffer = ''\n          }\n          text = true\n        }\n        buffer += chr\n      }\n    }\n\n    if (buffer.length > 0) {\n      if (text) {\n        result[result.length] = buffer\n      } else {\n        result[result.length] = parseInt(buffer, 10)\n      }\n    }\n\n    return result\n  }\n\n  var array1 = _strnatcmpSplit(fString1 + '')\n  var array2 = _strnatcmpSplit(fString2 + '')\n\n  var len = array1.length\n  var text = true\n\n  var result = -1\n  var r = 0\n\n  if (len > array2.length) {\n    len = array2.length\n    result = 1\n  }\n\n  for (i = 0; i < len; i++) {\n    if (isNaN(array1[i])) {\n      if (isNaN(array2[i])) {\n        text = true\n\n        if ((r = strcmp(array1[i], array2[i])) !== 0) {\n          return r\n        }\n      } else if (text) {\n        return 1\n      } else {\n        return -1\n      }\n    } else if (isNaN(array2[i])) {\n      if (text) {\n        return -1\n      } else {\n        return 1\n      }\n    } else {\n      if (text || fVersion) {\n        if ((r = (array1[i] - array2[i])) !== 0) {\n          return r\n        }\n      } else {\n        if ((r = strcmp(array1[i].toString(), array2[i].toString())) !== 0) {\n          return r\n        }\n      }\n\n      text = false\n    }\n  }\n\n  return result\n}\n"]}